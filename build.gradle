buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.1.0'
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'jacoco'
}

apply plugin: 'org.owasp.dependencycheck'

repositories {
    mavenCentral()
    jcenter()
}


group 'net.kebernet'
version '1.0-SNAPSHOT'


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.28.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}


sourceSets {
    functionalTest {
        groovy.srcDir file('src/functional/groovy')
        java.srcDir file('src/functional/java')
        resources.srcDir file('src/functional/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test //, integrationTest
    testLogging {
        showStandardStreams = true
    }
    jacoco {
        enabled = true
        append = true
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}


jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

check.dependsOn functionalTest
check.dependsOn dependencyCheckAnalyze
check.finalizedBy jacocoTestReport


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

pluginBundle {
    website = "https://github.com/atl-tw/world-engine"
    vcsUrl = "https://github.com/atl-tw/world-engine.git"
    description = "Opinionated Terraform"
    tags = ['terraform', 'aws', 'gcp', 'azure']

    plugins {
        worldEngine {
            id = 'net.kebernet.world-engine'
            displayName = "World Engine"
            description = "Opinionated Terraform"
        }
    }
}

gradlePlugin {
    plugins {
        worldEngine {
            id = 'net.kebernet.world-engine'
            implementationClass = 'net.kebernet.worldengine.WorldEngine'
        }
    }
}